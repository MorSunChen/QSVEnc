#!/bin/sh

#-----------------------------------------------------------------------------------------
#    QSVEnc by rigaya
#  -----------------------------------------------------------------------------------------
#   ソースコードについて
#   ・無保証です。
#   ・本ソースコードを使用したことによるいかなる損害・トラブルについてrigayaは責任を負いません。
#   以上に了解して頂ける場合、本ソースコードの使用、複製、改変、再頒布を行って頂いて構いません。
#  -----------------------------------------------------------------------------------------

write_config_mak()
{
    echo $1
    echo $1 >> config.mak
}

write_qsv_config()
{
    echo $1
    echo $1 >> qsv_config.h
}

cxx_check()
{
    echo "#include <iostream>" > cxx_check.c
    if [ -n "$2" ]; then
        echo "#include <$2>" >> cxx_check.c
    fi 
    if [ -n "$3" ]; then
        echo "extern \"C\" {" >> cxx_check.c
        echo "#include <$3>" >> cxx_check.c
        echo "}" >> cxx_check.c
    fi 
    echo "int main(void){ $4; std::cout << \"Hello World!\" << std::endl; return 0;}" >> cxx_check.c
    $CXX cxx_check.c $1 -o cxx_check 2>/dev/null
    ret=$?
    rm -f cxx_check*
    return $ret
}

check_gxx_ver()
{
    #return 0 if version is ok, 1 if not
    $1 -dumpversion 1>/dev/null 2>/dev/null
    ret=$?
    if [ $ret -ne 0 ]; then
        return 1
    fi
    GCC_VER=( `$1 -dumpversion | tr -s "." " "` )
    if [ ${GCC_VER[0]} -gt $2 ]; then
        return 0
    fi
    if [ ${GCC_VER[0]} -lt $2 ]; then
        return 1
    fi
    if [ ${GCC_VER[1]} -gt $3 ]; then
        return 0
    fi
    if [ ${GCC_VER[1]} -lt $3 ]; then
        return 1
    fi
    if [ ${GCC_VER[2]} -lt $4 ]; then
        return 1
    fi
    return 0
}

rm -f config.* .depend qsv_config.h

PKGCONFIG="pkg-config"
USE_PKGCONFIG=1

CHECK_LIBAV_NAMES="libswresample libavutil libavcodec libavformat"
ENABLE_DEBUG=0
LIBVA_SUPPORT=1
ENABLE_AVCODEC_QSV_READER=1
ENABLE_VAPOURSYNTH=0
CXX=g++
LD=g++
AS=yasm
PROGRAM=qsvencc
PREFIX="/usr/local"
EXTRACXXFLAGS=""
EXTRALDFLAGS=""
SRCS=""
ASMS=""
LIBAV_CFLAGS=""
LIBAV_LIBS=""


SRCDIR=$(dirname "$0")
if [ "${SRCDIR}" == "`pwd`" ]; then
    SRCDIR=.
fi

for opt; do
    optarg="${opt#*=}"
    case "$opt" in
        --prefix=*)
            PREFIX="$optarg"
            ;;
        --cxx=*)
            CXX="$optarg"
            LD="$optarg"
            ;;
        --asm=*)
            AS="$optarg"
            ;;
        --extra-cflags=*)
            EXTRACXXFLAGS="$optarg"
            ;;
        --extra-ldflags=*)
            EXTRALDFLAGS="$optarg"
            ;;
        --enable-debug)
            ENABLE_DEBUG=1
            ;;
        --disable-libva)
            LIBVA_SUPPORT=0
            ;;
        --disable-libav)
            ENABLE_AVCODEC_QSV_READER=0
            ;;
        --disable-vapoursynth)
            ENABLE_VAPOURSYNTH=0
            ;;
        --pkg-config=*)
            PKGCONFIG="$optarg"
            ;;
        *)
            error_exit "unknown option $opt"
            ;;
    esac
done

for file in "${CXX}" "${LD}" "${AS}"; do
    if [ ! `which $file 2> /dev/null` ]; then
        echo $file not found
        exit 1
    fi
done

printf "checking for ${CXX}..."
if ! cxx_check "" ; then
    echo $CXX does not work
    exit 1
fi
echo "OK"

CXXFLAGS="-Wno-attributes -Wno-literal-suffix -DLINUX -DLINUX64 -DUNIX -D_FILE_OFFSET_BITS=64 -D__USE_LARGEFILE64 -m64 -I${SRCDIR} -I${SRCDIR}/mfx_dispatch/include -I${SRCDIR}/MediaSDK/include -I${SRCDIR}/QSVPipeline/include -I${SRCDIR}/QSVPlugins"
LDFLAGS="-L. -lpthread -lmfx -ldl -lstdc++"
ASFLAGS="-I. -DARCH_X86_64=1 -f elf64"

printf "checking for pthread..."
if cxx_check "${CXXFLAGS} -pthread ${LDFLAGS} -lpthread" ; then
    CXXFLAGS="$CXXFLAGS -pthread"
    LDFLAGS="${LDFLAGS} -lpthread"
else
    echo "pthread not installed." 
    exit 1
fi
echo "OK"

printf "checking for c++11 support..."
if cxx_check "${CXXFLAGS} -std=c++11 ${LDFLAGS}" ; then
    CXXFLAGS="$CXXFLAGS -std=c++11"
else
    echo $CXX does not work with -std=c++1y/c++14
    exit 1
fi
echo "OK"

printf "checking for <chrono>..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "chrono" "" "auto start = std::chrono::system_clock::now();" ; then
    echo "<chrono> not supported with this compiler." 
    exit 1
fi
echo "OK"

printf "checking for <thread>..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "thread" "" "std::thread th;" ; then
    echo "<thread> not supported with this compiler." 
    exit 1
fi
echo "OK"

printf "checking for <mutex>..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "mutex" "" "std::mutex mtx;" ; then
    echo "<mutex> not supported with this compiler." 
    exit 1
fi
echo "OK"

printf "checking for <atomic>..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "atomic" "" "std::atomic<int> value(0);" ; then
    echo "<atomic> not supported with this compiler." 
    exit 1
fi
echo "OK"

printf "checking for <type_traits>..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "type_traits" "" "std::cout << std::is_integral<int>::value << std::endl;" ; then
    echo "<type_traits> not supported with this compiler." 
    exit 1
fi
echo "OK"

printf "checking for lambda..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "" "" "auto test = []() { std::cout << \"Hello C++11!!\" << std::endl; };" ; then
    echo "lambda not supported with this compiler." 
    exit 1
fi
echo "OK"

printf "checking for nullptr..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "" "" "auto ptr = nullptr;" ; then
    echo "nullptr not supported with this compiler." 
    exit 1
fi
echo "OK"

printf "checking for range based for..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "vector" "" "std::vector<int> v = { 1, 2, 3 }; for (auto i : v) { std::cout << i << std::endl; }" ; then
    echo "range based for not supported with this compiler." 
    exit 1
fi
echo "OK"

printf "checking for alignas(n)..."
if ! cxx_check "${CXXFLAGS} ${LDFLAGS}" "" "" "alignas(16) int value[8] = { 0 };" ; then
    echo "alignas(n) not supported with this compiler." 
    exit 1
fi
echo "OK"

if [ ! $ENABLE_DEBUG -eq 0 ]; then
    echo "configuring for debug..."
    CXXFLAGS="${CXXFLAGS} -O0 -g -D_DEBUG"
    if cxx_check "${CXXFLAGS} -march=native -mtune=native ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -march=native -mtune=native"
    fi
else
    echo "configuring for speed..."
    CXXFLAGS="${CXXFLAGS} -O3 -DNDEBUG=1"
    if cxx_check "${CXXFLAGS} -mfpmath=sse ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -mfpmath=sse"
    fi
    if cxx_check "${CXXFLAGS} -fexcess-precision=fast ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -fexcess-precision=fast"
    fi
    if cxx_check "${CXXFLAGS} -ffast-math ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -ffast-math"
    fi
    if cxx_check "${CXXFLAGS} -march=native -mtune=native ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -march=native -mtune=native"
    fi
    if cxx_check "${CXXFLAGS} -fomit-frame-pointer ${LDFLAGS}" ; then
        CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
    fi
    LDFLAGS="$LDFLAGS -Wl,-s"
fi

printf "checking for libva..."
if [ $LIBVA_SUPPORT -ne 0 ]; then
    if cxx_check "${CXXFLAGS} ${LDFLAGS} -lva-drm -ldrm -lva" ; then
        LDFLAGS="$LDFLAGS -lva-drm -ldrm -lva"
        CXXFLAGS="$CXXFLAGS -DLIBVA_SUPPORT -DLIBVA_DRM_SUPPORT"
        echo "yes"
    else
        LIBVA_SUPPORT=0
        echo "no"
    fi
fi

if [ -n $EXTRACXXFLAGS ]; then
    printf "checking --extra-cflags..."
    if ! cxx_check "${CXXFLAGS} ${EXTRACXXFLAGS} ${LDFLAGS}" ; then
        echo --extra-cflags=${EXTRACXXFLAGS} does not work
        exit 1
    fi
    echo "OK"
fi

if [ -n $EXTRALDFLAGS ]; then
    printf "checking --extra-ldflags..."
    if ! cxx_check "${CXXFLAGS} ${EXTRACXXFLAGS} ${LDFLAGS} ${EXTRALDFLAGS}" ; then
        echo --extra-ldflags=${EXTRALDFLAGS} does not work
        exit 1
    fi
    echo "OK"
fi

printf "checking libs by pkg-config..."
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$PREFIX/lib/pkgconfig
which $PKGCONFIG 2>/dev/null 1>/dev/null
if [ $? -ne 0 ]; then
    echo "${PKGCONFIG} does not exist."
    USE_PKGCONFIG=0
fi

if [ $ENABLE_AVCODEC_QSV_READER -ne 0 ]; then
    if [ $USE_PKGCONFIG -ne 0 ]; then
        if ! ${PKGCONFIG} --exists $CHECK_LIBAV_NAMES ; then
            echo "libs could not be detected by ${PKGCONFIG}. [ PKG_CONFIG_PATH=${PKG_CONFIG_PATH} ]"
        else
            echo "OK"
            LIBAV_LIBS=`${PKGCONFIG} --libs ${CHECK_LIBAV_NAMES}`
            LIBAV_CFLAGS=`${PKGCONFIG} --cflags ${CHECK_LIBAV_NAMES}`
        fi
    fi
    
    if [ -z "$LIBAV_LIBS" ]; then
        LIBAV_LIBS=""
        for lib in $CHECK_LIB_NAMES; do
            LIBAV_LIBS="${LIBAV_LIBS} -l${lib#lib}"
        done
        echo "lib settings might be inaqurate."
    fi

    printf "checking for libavutil.."
    if ! cxx_check "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavutil/avutil.h" "avutil_version();" ; then
        echo "no"
        ENABLE_AVCODEC_QSV_READER=0
    else
        echo "yes"
    fi
    
    printf "checking for libavcodec..."
    if ! cxx_check "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavcodec/avcodec.h" "avcodec_find_decoder((AVCodecID)0);" ; then
        echo "no"
        ENABLE_AVCODEC_QSV_READER=0
    else
        echo "yes"
    fi
    
    printf "checking for libavformat..."
    if ! cxx_check "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libavformat/avformat.h" "avformat_find_stream_info(0,0);" ; then
        echo "no"
        ENABLE_AVCODEC_QSV_READER=0
    else
        echo "yes"
    fi
    
    printf "checking for libswresample..."
    if ! cxx_check "${CXXFLAGS} ${EXTRACXXFLAGS} ${LIBAV_CFLAGS} ${LDFLAGS} ${EXTRALDFLAGS} ${LIBAV_LIBS}" "" "libswresample/swresample.h" "swr_alloc();" ; then
        echo "no"
        ENABLE_AVCODEC_QSV_READER=0
    else
        echo "yes"
    fi
fi

SRC_MFX_DISPATCH=" \
main.cpp                   mfx_critical_section.cpp  mfx_critical_section_linux.cpp \
mfx_dispatcher.cpp         mfx_dispatcher_log.cpp    mfx_dxva2_device.cpp \
mfx_function_table.cpp     mfx_library_iterator.cpp  mfx_library_iterator_linux.cpp \
mfx_load_dll.cpp           mfx_load_dll_linux.cpp    mfx_load_plugin.cpp \
mfx_plugin_cfg_parser.cpp  mfx_plugin_hive.cpp       mfx_plugin_hive_linux.cpp \
mfx_win_reg_key.cpp \
"

SRC_QSVPIPELINE=" \
vm/atomic.cpp                    vm/atomic.cpp \
vm/shared_object.cpp             vm/shared_object_linux.cpp \
vm/thread.cpp                    vm/thread_linux.cpp \
vm/time.cpp                      vm/time_linux.cpp \
DeviceId.cpp                     avc_bitstream.cpp \
avc_nal_spl.cpp                  avc_spl.cpp \
avcodec_qsv.cpp                  avcodec_reader.cpp \
avcodec_writer.cpp               avi_reader.cpp \
avs_reader.cpp                   base_allocator.cpp \
cl_func.cpp                      convert_csp.cpp \
convert_csp_avx.cpp              convert_csp_avx2.cpp \
convert_csp_sse2.cpp             convert_csp_ssse3.cpp \
cpu_info.cpp                     d3d11_allocator.cpp \
d3d11_device.cpp                 d3d_allocator.cpp \
d3d_device.cpp                   general_allocator.cpp \
gpu_info.cpp                     mfx_buffering.cpp \
pipeline_encode.cpp              plugin_utils.cpp \
qsv_control.cpp                  qsv_event.cpp \
qsv_ini.cpp                      qsv_prm.cpp \
qsv_simd.cpp                     qsv_util.cpp \
ram_speed.cpp                    sample_utils.cpp \
scene_change_detection.cpp       scene_change_detection_avx.cpp \
scene_change_detection_simd.cpp  sysmem_allocator.cpp \
vaapi_allocator.cpp              vaapi_device.cpp \
vaapi_utils.cpp                  vaapi_utils_drm.cpp \
vaapi_utils_x11.cpp              vpp_ex.cpp \
vpy_reader.cpp \
"

ASM_QSVPIPELINE="ram_speed_x64.asm"

SRC_PLUGIN_DELOGO=" \
delogo_process_avx.cpp    delogo_process_avx2.cpp \
delogo_process_sse41.cpp  logo.cpp \
plugin_delogo.cpp"

SRC_PLUGIN_ROTATE="plugin_rotate.cpp"

SRC_QSVENCC="QSVEncC.cpp"

for src in $SRC_MFX_DISPATCH; do
    SRCS="$SRCS mfx_dispatch/src/$src"
done

for src in $SRC_QSVPIPELINE; do
    SRCS="$SRCS QSVPipeline/src/$src"
done

for asm in $ASM_QSVPIPELINE; do
    ASMS="$ASMS QSVPipeline/src/$asm"
done

for src in $SRC_PLUGIN_ROTATE; do
    SRCS="$SRCS QSVPlugins/rotate/$src"
done

for src in $SRC_PLUGIN_DELOGO; do
    SRCS="$SRCS QSVPlugins/delogo/$src"
done

for src in $SRC_QSVENCC; do
    SRCS="$SRCS QSVEncC/src/$src"
done

echo ""
echo "Creating config.mak, qsv_config.h..."
echo "SRCS = $SRCS" >> config.mak
echo "ASMS = $ASMS" >> config.mak
write_config_mak "SRCDIR = $SRCDIR"
write_config_mak "CXX = $CXX"
write_config_mak "LD  = $LD"
write_config_mak "AS  = $AS"
write_config_mak "PROGRAM = $PROGRAM"
write_config_mak "ENABLE_DEBUG = $ENABLE_DEBUG"
write_config_mak "CXXFLAGS = $CXXFLAGS $EXTRACXXFLAGS $LIBAV_CFLAGS"
write_config_mak "LDFLAGS = $LDFLAGS $EXTRALDFLAGS $LIBAV_LIBS"
write_config_mak "ASFLAGS = $ASFLAGS"
write_config_mak "PREFIX = $PREFIX"
write_qsv_config "#define ENABLE_AVI_READER             0"
write_qsv_config "#define ENABLE_AVISYNTH_READER        0"
write_qsv_config "#define ENABLE_VAPOURSYNTH_READER     $ENABLE_VAPOURSYNTH"
write_qsv_config "#define ENABLE_AVCODEC_QSV_READER     $ENABLE_AVCODEC_QSV_READER"
write_qsv_config "#define ENABLE_CUSTOM_VPP             0"
write_qsv_config "#define ENABLE_ADVANCED_DEINTERLACE   0"
write_qsv_config "#define ENABLE_MVC_ENCODING           0"
write_qsv_config "#define ENABLE_FPS_CONVERSION         0"
write_qsv_config "#define ENABLE_OPENCL                 0"
write_qsv_config "#define ENABLE_SESSION_THREAD_CONFIG  0"
write_qsv_config "#define ENABLE_FEATURE_COP3_AND_ABOVE 0"

echo successfully generated config.mak, qsv_config.h


